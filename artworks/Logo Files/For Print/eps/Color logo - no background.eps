%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2382 873
%%HiResBoundingBox: 0 0 2381.04 872.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2381.04 872.88 re
W
q
[0.24 0 0 -0.24 0 872.88] cm
q
0 0 9920.833 3635.1384 re
W*
q
[30.384621 0 0 30.399933 662.69403 547.50281] cm
/DeviceRGB {} CS
[0.251 0.4314 0.0392] SC
/DeviceRGB {} cs
[0.251 0.4314 0.0392] sc
89.199997 64.300003 m
86.799995 64.300003 84.799995 65.800003 84 67.800003 c
58 62.600002 l
58 62.400002 58 62.300003 58 62.100002 c
58 61.400002 57.900002 60.700001 57.700001 60.000004 c
71.699997 53.900005 l
73.099998 56.200005 75.599998 57.800007 78.5 57.800007 c
82.900002 57.800007 86.5 54.200008 86.5 49.800007 c
86.5 46.600006 84.599998 43.800007 81.800003 42.600006 c
83.700005 36.100006 l
83.900002 36.100006 84.100006 36.200005 84.300003 36.200005 c
85.300003 36.200005 86.300003 35.800003 87 35.100006 c
88.599998 33.600006 88.699997 31.100006 87.199997 29.500006 c
86.5 28.700006 85.399994 28.300005 84.299995 28.300005 c
83.299995 28.300005 82.299995 28.700005 81.599998 29.400005 c
80.799995 30.100006 80.400002 31.100006 80.400002 32.200005 c
80.400002 33.300003 80.700005 34.300003 81.5 35.000004 c
81.900002 35.400005 82.300003 35.700005 82.800003 35.900005 c
81 42.300007 l
80.199997 42.100006 79.400002 41.900005 78.599998 41.900005 c
76.400002 41.900005 74.400002 42.800007 73 44.200005 c
71 42.200005 l
72.699997 40.100006 72.699997 37.000004 70.800003 35.000004 c
69.800003 33.900005 68.300003 33.300003 66.800003 33.300003 c
65.400002 33.300003 64.100006 33.800003 63.100002 34.800003 c
62.500004 35.400002 62.000004 36.100002 61.700001 36.900002 c
53.300003 35.5 l
54.400002 19.700001 l
57.100002 19.400002 59.200001 17.1 59.200001 14.300001 c
59.200001 11.300001 56.799999 8.900002 53.799999 8.900002 c
50.799999 8.900002 48.399998 11.300001 48.399998 14.300001 c
48.399998 16.800001 50.099998 19 52.499996 19.600002 c
51.399998 35.200005 l
38 32.799999 l
37.900002 31.9 37.599998 31.099998 37 30.4 c
36.299999 29.6 35.200001 29.199999 34.099998 29.199999 c
33.299999 29.199999 32.5 29.499998 31.799999 29.9 c
25.199999 22.700001 l
25.799999 22 26.199999 21.1 26.199999 20.200001 c
26.199999 18 24.4 16.200001 22.199999 16.200001 c
19.999998 16.200001 18.199999 18 18.199999 20.200001 c
18.199999 22.400002 19.999998 24.200001 22.199999 24.200001 c
23.099998 24.200001 23.799999 23.900002 24.499998 23.5 c
31.099998 30.700001 l
29.899998 32.200001 29.799999 34.299999 31.099998 35.799999 c
25 45.599998 l
24.1 45.199997 23.1 45 22.1 45 c
20.300001 45 18.5 45.700001 17.200001 46.900002 c
16.900002 47.200001 16.6 47.5 16.400001 47.800003 c
12.700002 45.400002 l
13.000002 44.900002 13.100001 44.300003 13.100001 43.700001 c
13.100001 41.5 11.300001 39.700001 9.100001 39.700001 c
6.900002 39.700001 5.100001 41.5 5.100001 43.700001 c
5.100001 45.900002 6.900002 47.700001 9.100001 47.700001 c
10.300001 47.700001 11.400002 47.100002 12.100001 46.299999 c
15.800001 48.700001 l
14.300001 51.299999 14.700001 54.799999 16.800001 57.099998 c
17.1 57.399998 17.300001 57.599998 17.6 57.799999 c
14.400001 62.299999 l
13.700001 62 12.900001 61.799999 12.1 61.799999 c
9.1 61.799999 6.6 64.199997 6.6 67.300003 c
6.6 70.400009 9 72.800003 12.1 72.800003 c
15.200001 72.800003 17.6 70.400002 17.6 67.300003 c
17.6 65.900002 17 64.5 16.1 63.600002 c
19.5 59.000004 l
20.299999 59.300003 21.200001 59.500004 22.200001 59.500004 c
23.400002 59.500004 24.6 59.200005 25.6 58.600002 c
33.099998 70 l
32.199997 70.699997 31.699999 71.800003 31.699999 73 c
31.699999 75.199997 33.5 77 35.699997 77 c
37.899994 77 39.699997 75.199997 39.699997 73 c
39.699997 70.800003 37.899998 69 35.699997 69 c
35.099998 69 34.499996 69.199997 33.999996 69.400002 c
26.499996 57.800003 l
26.699997 57.600002 26.899996 57.500004 27.099997 57.300003 c
29.999996 54.600002 30.099997 50.100002 27.399996 47.200005 c
27.199995 47.000004 26.999996 46.800003 26.699995 46.600006 c
32.699997 36.800007 l
33.099998 37.000008 33.599998 37.100006 33.999996 37.100006 c
34.999996 37.100006 35.999996 36.700005 36.699997 36.000008 c
37.099998 35.600006 37.399998 35.200008 37.599998 34.800007 c
51 37.100006 l
50 54.5 l
48.400002 54.599998 47 55.200001 45.799999 56.099998 c
43.900002 54 l
44.5 53.299999 44.900002 52.400002 44.900002 51.400002 c
44.900002 49.200001 43.100002 47.400002 40.900002 47.400002 c
38.700001 47.400002 36.900002 49.200001 36.900002 51.400002 c
36.900002 53.600002 38.700001 55.400002 40.900002 55.400002 c
41.700001 55.400002 42.5 55.100002 43.200001 54.700001 c
45.100002 56.799999 l
43.800003 58.200001 43.000004 60 43.000004 62.099998 c
43.000004 66.199997 46.200005 69.5 50.200005 69.699997 c
50.500004 81.899994 l
47.800003 82.199997 45.700005 84.499992 45.700005 87.299995 c
45.700005 90.299995 48.100006 92.699997 51.100006 92.699997 c
54.100006 92.699997 56.500008 90.299995 56.500008 87.299995 c
56.500008 84.399994 54.300007 82.099998 51.400009 81.899994 c
51.10001 69.699997 l
54.10001 69.399994 56.60001 67.399994 57.60001 64.599998 c
83.600006 69.799995 l
83.600006 69.799995 83.600006 69.899994 83.600006 69.899994 c
83.600006 72.999992 86.100006 75.499992 89.200005 75.499992 c
92.300003 75.499992 94.800003 72.999992 94.800003 69.899994 c
94.800003 66.799995 92.199997 64.300003 89.199997 64.300003 c
h
83 30.700001 m
83.400002 30.400002 83.800003 30.200001 84.300003 30.200001 c
84.800003 30.200001 85.400002 30.400002 85.700005 30.800001 c
86.400002 31.6 86.400002 32.800003 85.600006 33.600002 c
84.800003 34.300003 83.500008 34.300003 82.800003 33.500004 c
82.400002 33.100002 82.300003 32.600002 82.300003 32.100002 c
82.300003 31.600002 82.599998 31 83 30.700001 c
h
9.2 45.700001 m
8.099999 45.700001 7.2 44.799999 7.2 43.700001 c
7.2 42.600002 8.099999 41.700001 9.2 41.700001 c
10.3 41.700001 11.2 42.600002 11.2 43.700001 c
11.2 44.799999 10.3 45.700001 9.2 45.700001 c
h
12.2 70.599998 m
10.299999 70.599998 8.7 69 8.7 67.099998 c
8.7 65.199997 10.3 63.599998 12.2 63.599998 c
14.099999 63.599998 15.7 65.199997 15.7 67.099998 c
15.7 69 14.1 70.599998 12.2 70.599998 c
h
37.599998 73.099998 m
37.599998 74.199997 36.699997 75.099998 35.599998 75.099998 c
34.5 75.099998 33.599998 74.199997 33.599998 73.099998 c
33.599998 72 34.5 71.099998 35.599998 71.099998 c
36.700001 71.099998 37.599998 72 37.599998 73.099998 c
h
25.700001 55.900002 m
24.700001 56.800003 23.5 57.300003 22.200001 57.300003 c
20.800001 57.300003 19.400002 56.700005 18.400002 55.700005 c
16.500002 53.600006 16.600002 50.400005 18.600002 48.400005 c
19.600002 47.500004 20.800003 47.000004 22.100002 47.000004 c
23.500002 47.000004 24.900002 47.600002 25.900002 48.600002 c
27.9 50.700001 27.799999 54 25.700001 55.900002 c
h
22.200001 22.1 m
21.1 22.1 20.200001 21.200001 20.200001 20.1 c
20.200001 19 21.1 18.1 22.200001 18.1 c
23.300001 18.1 24.200001 19 24.200001 20.1 c
24.1 21.200001 23.299999 22.1 22.200001 22.1 c
h
35.5 34.599998 m
34.700001 35.299999 33.400002 35.299999 32.700001 34.5 c
32 33.700001 32 32.5 32.799999 31.700001 c
33.200001 31.400002 33.599998 31.200001 34.099998 31.200001 c
34.599998 31.200001 35.199997 31.400002 35.5 31.800001 c
36.299999 32.599998 36.200001 33.799999 35.5 34.599998 c
h
78.5 43.799999 m
81.800003 43.799999 84.5 46.5 84.5 49.799999 c
84.5 53.099998 81.800003 55.799999 78.5 55.799999 c
75.199997 55.799999 72.5 53.099998 72.5 49.799999 c
72.5 46.5 75.199997 43.799999 78.5 43.799999 c
h
64.400002 36.200001 m
65 35.600002 65.900002 35.299999 66.800003 35.299999 c
67.800003 35.299999 68.700005 35.700001 69.300003 36.399998 c
70.600006 37.799999 70.5 39.999996 69.100006 41.299999 c
68.500008 41.899998 67.600006 42.200001 66.700005 42.200001 c
65.700005 42.200001 64.800003 41.799999 64.200005 41.100002 c
62.900002 39.599998 63 37.5 64.400002 36.200001 c
h
61.299999 38.799999 m
61.299999 40.099998 61.799999 41.399998 62.799999 42.399998 c
63.799999 43.499996 65.300003 44.099998 66.800003 44.099998 c
68.100006 44.099998 69.300003 43.599998 70.300003 42.799999 c
72.300003 44.799999 l
71.300003 46.099998 70.600006 47.799999 70.600006 49.700001 c
70.600006 50.5 70.700005 51.200001 70.900009 52 c
56.900009 58.099998 l
55.800011 56.299999 54.000008 55 51.900009 54.599998 c
53.10001 37.299999 l
61.299999 38.799999 l
h
50.200001 14.1 m
50.200001 12.200001 51.700001 10.700001 53.600002 10.700001 c
55.500004 10.700001 57.000004 12.200001 57.000004 14.1 c
57.000004 16 55.500004 17.5 53.600002 17.5 c
51.700001 17.5 50.200001 16 50.200001 14.1 c
h
40.900002 53.400002 m
39.800003 53.400002 38.900002 52.5 38.900002 51.400002 c
38.900002 50.300003 39.800003 49.400002 40.900002 49.400002 c
42 49.400002 42.900002 50.300003 42.900002 51.400002 c
42.900002 52.5 42 53.400002 40.900002 53.400002 c
h
54.5 87.300003 m
54.5 89.200005 53 90.700005 51.099998 90.700005 c
49.199997 90.700005 47.699997 89.200005 47.699997 87.300003 c
47.699997 85.400002 49.199997 83.900002 51.099998 83.900002 c
53 83.900002 54.5 85.400002 54.5 87.300003 c
h
50.5 67.599998 m
47.400002 67.599998 44.900002 65.099998 44.900002 62 c
44.900002 58.900002 47.400002 56.400002 50.5 56.400002 c
53.599998 56.400002 56 59 56 62.099998 c
56 65.199997 53.5 67.599998 50.5 67.599998 c
h
89.199997 73.400002 m
87.199997 73.400002 85.599998 71.800003 85.599998 69.800003 c
85.599998 67.800003 87.199997 66.200005 89.199997 66.200005 c
91.199997 66.200005 92.799995 67.800003 92.799995 69.800003 c
92.799995 71.800003 91.099998 73.400002 89.199997 73.400002 c
h
f
Q
q
[29.6022 0 0 29.617121 4111.1401 1339.95325] cm
/DeviceRGB {} CS
[0.3176 0.502 0.0667] SC
/DeviceRGB {} cs
[0.3176 0.502 0.0667] sc
26.698999 19.531 m
30.995899 19.531 33.769299 21.7185 33.769299 25.8396 c
33.769299 39.999599 l
28.144299 39.999599 l
28.144299 27.440599 l
28.144299 25.077299 26.659899 24.0422 24.980198 24.0422 c
22.968498 24.0422 21.191097 25.1945 21.191097 28.671101 c
21.191097 39.9991 l
15.507498 39.9991 l
15.507498 27.4991 l
15.507498 25.0968 14.062198 24.042099 12.284798 24.042099 c
10.331698 24.042099 8.515298 25.194399 8.515298 28.963999 c
8.515298 39.999001 l
2.909798 39.999001 l
2.909798 19.921001 l
8.515298 19.921001 l
8.515298 22.284302 l
9.843398 20.507002 11.874698 19.530401 14.335598 19.530401 c
17.245798 19.530401 19.433298 20.585102 20.487898 22.5382 c
21.894197 20.526501 24.042599 19.530399 26.698797 19.530399 c
26.698999 19.531 l
h
55.703125 34.5508 m
55.703125 37.0117 55.937504 38.5742 56.191406 39.453102 c
56.191406 39.999981 l
50.937508 39.999981 l
50.488289 37.812481 l
48.98439 39.62888 46.386688 40.390579 44.042988 40.390579 c
40.878887 40.390579 37.792988 38.98428 37.792988 34.80468 c
37.792988 30.64448 40.898487 29.238279 45.097687 28.32028 c
48.398487 27.578091 l
49.824287 27.246061 50.332088 26.75778 50.332088 25.93749 c
50.332088 23.96479 48.535187 23.41799 46.95319 23.41799 c
44.92189 23.41799 43.37899 24.218769 43.02739 26.48439 c
38.04689 25.585951 l
38.88673 21.425751 41.93359 19.53125 47.26569 19.53125 c
51.289089 19.53125 55.70319 20.722651 55.70319 26.777349 c
55.70319 34.550751 l
55.703125 34.5508 l
h
45.800823 36.582001 m
48.476624 36.582001 50.625023 34.804699 50.625023 30.820301 c
45.859421 32.167999 l
44.296921 32.539089 43.16412 33.085968 43.16412 34.433598 c
43.16412 35.878899 44.355518 36.581997 45.800819 36.581997 c
45.800823 36.582001 l
h
70.253716 40.37109 m
63.945114 40.37109 59.491714 36.17189 59.491714 29.94109 c
59.491714 23.69109 63.944817 19.53109 70.253716 19.53109 c
75.331818 19.53109 79.140411 22.167789 80.11702 26.913891 c
74.921722 27.480301 l
74.296722 25.078001 72.558426 23.964701 70.195122 23.964701 c
67.167824 23.964701 65.11702 26.3475 65.11702 29.941301 c
65.11702 33.515503 67.167816 35.9179 70.195122 35.9179 c
72.558418 35.9179 74.296722 34.785099 74.921722 32.402302 c
80.11702 32.968712 l
79.140457 37.714813 75.234222 40.37101 70.253723 40.37101 c
70.253716 40.37109 l
h
97.421936 19.922001 m
103.046936 19.922001 l
103.046936 40 l
97.714935 40 l
97.578217 37.578098 l
96.171913 39.3554 93.945419 40.390598 91.191513 40.390598 c
86.36731 40.390598 83.711014 37.871098 83.711014 33.4375 c
83.711014 19.921501 l
89.355515 19.921501 l
89.355515 32.226501 l
89.355515 34.882801 91.015717 35.859303 92.968811 35.859303 c
95.293015 35.859303 97.402412 34.687401 97.421913 30.996002 c
97.421913 19.922001 l
97.421936 19.922001 l
h
108.867233 40 m
108.867233 10 l
114.550835 10 l
114.550835 40 l
108.867233 40 l
h
136.835938 34.5508 m
136.835938 37.0117 137.070313 38.5742 137.324219 39.453102 c
137.324219 39.999981 l
132.070313 39.999981 l
131.621094 37.812481 l
130.117188 39.62888 127.519493 40.390579 125.175797 40.390579 c
122.011696 40.390579 118.925797 38.98428 118.925797 34.80468 c
118.925797 30.64448 122.031296 29.238279 126.230499 28.32028 c
129.531296 27.578091 l
130.957092 27.246061 131.46489 26.75778 131.46489 25.93749 c
131.46489 23.96479 129.667984 23.41799 128.085983 23.41799 c
126.05468 23.41799 124.51178 24.218769 124.160187 26.48439 c
119.179688 25.585951 l
120.019531 21.425751 123.066391 19.53125 128.398483 19.53125 c
132.42189 19.53125 136.835983 20.722651 136.835983 26.777349 c
136.835983 34.550751 l
136.835938 34.5508 l
h
126.93364 36.582001 m
129.609436 36.582001 131.757843 34.804699 131.757843 30.820301 c
126.992241 32.167999 l
125.429741 32.539089 124.296944 33.085968 124.296944 34.433598 c
124.296944 35.878899 125.488342 36.581997 126.933647 36.581997 c
126.93364 36.582001 l
h
145.820328 40.390629 m
144.082031 40.390629 142.617233 38.945328 142.617233 37.187531 c
142.617233 35.429733 144.082031 33.945332 145.820328 33.945332 c
147.597626 33.945332 149.062531 35.429733 149.062531 37.187531 c
149.062531 38.945328 147.597733 40.390629 145.820328 40.390629 c
h
158.066452 16.914 m
156.289154 16.914 154.804749 15.4687 154.804749 13.6718 c
154.804749 11.8945 156.289154 10.4491 158.066452 10.4491 c
159.804749 10.4491 161.289154 11.8944 161.289154 13.6718 c
161.289154 15.4687 159.804749 16.914 158.066452 16.914 c
h
155.195358 40 m
155.195358 19.922001 l
160.859451 19.922001 l
160.859451 40 l
155.195358 40 l
h
176.03554 40.390629 m
169.64883 40.390629 165.039536 36.503929 165.039536 29.941628 c
165.039536 23.418228 169.60983 19.531628 176.03554 19.531628 c
182.50034 19.531628 187.05154 23.418327 187.05154 29.941628 c
187.05154 36.504128 182.48125 40.390629 176.03554 40.390629 c
h
175.97653 35.917999 m
179.23824 35.917999 181.46483 33.535198 181.46483 29.941399 c
181.46483 26.347599 179.23824 23.964798 175.97653 23.964798 c
172.83203 23.964798 170.62494 26.347599 170.62494 29.941399 c
170.62494 33.535198 172.83194 35.917999 175.97653 35.917999 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
